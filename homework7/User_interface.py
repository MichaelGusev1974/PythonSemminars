def get_info():
    info = []
    surname = input('Введите фамилию: ')
    info.append(surname)
    name = input('Введите имя: ')
    info.append(name)
    phone_number = ''
    valid = False
    while not valid:
        try:                 # Обработка исключений. Оператор try-except и if-else проверка на количество цифр и вводимые символы
            phone_number = input('Введите номер телефона: ')
            if len(phone_number) != 11:
                print('в номере телефона должно быть 11 цифр')
            else:
                phone_number = int(phone_number)
                valid = True
        except:
            print('Номер телефона должен состоять только из цифр.')
    info.append(phone_number)
    description = input('Введите описание: ')
    info.append(description)
    return info

# Когда ошибки в программе возникают в процессе написания кода или его тестирования, то код исправляется программистом
# так, чтобы ошибок не возникало. Однако нередко действия пользователя приводят к тому, что в программе возникает
# исключение. Например, программа ожидает ввод числа, но человек ввел букву. Попытка преобразовать ее к числу приведет к
# возбуждению исключения ValueError, и программа аварийно завершится. На этот случай в языках программирования, в том
# числе Python, существует специальный оператор, позволяющий перехватывать возникающие исключения и обрабатывать их так,
# чтобы программа продолжала работать или корректно завершала свою работу. В Питоне такой перехват выполняет оператор
# try-except. "Try" переводится как "попытаться", "except" – как исключение. Словами описать его работу можно так:
# "Попытаться сделать то-то и то-то, если при этом возникло исключение, то сделать вот это и это."
# Его конструкция похожа на условный оператор с веткой else.