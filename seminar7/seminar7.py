# 1.напечатать сторку в одну линию - C:\WINDOWS\System32\drivers\etc\nst

print('C:\WINDOWS\System32\drivers\etc\\nst')
print(r'C:\WINDOWS\System32\drivers\etc\nst')      # символ r в начале убирает конфликты.

# 2. записать в список все буквы строки f=‘privet’
f = 'privet'
print([i for i in f])                             # 1 вариант
print(list(f))                                    # лучший вариант

# 3. преобразовать список таким образом
# a = [4, 3, -10, 1, 7, 12]
#  [4, -10, 12, 3, 1, 7]
a = [4, 3, -10, 1, 7, 12]
a.sort(key=lambda x: x % 2)                  # 1 вариант sort - это метод - если нужно изменить оригинальный список
print(a)
print(sorted(a, key=lambda x: x % 2))        # 2 вариант sorted - это ф-я - сортирует список и создает новый в переменной

# 4. На вход программы поступает список наименований рек, записанных в одну строчку через пробел.
# Необходимо отсортировать этот список в порядке убывания длин названий. Результат вывести в одну строчку через пробел.
# Sample Input:
# Лена Енисей Волга Дон
# Sample Output:
# Енисей Волга Лена Дон

s = ['Лена', 'Енисей', 'Волга', 'Дон']
print(sorted(s, key=len))                    # вариант сортировки по возрастанию длины элемента (слова)
print(sorted(s, key=len, reverse=True))      # вариант сортировки по убыванию длины элемента (слова)


# 5. Вводится строка. Требуется, используя введенную строку, сформировать N=10 пар кортежей в формате:
# (символ, порядковый индекс)
# Первый индекс имеет значение 0. Строка может быть короче 10 символов, а может быть и длиннее.
# То есть, число пар может быть 10 и менее. Используя функцию zip сформируйте указанные кортежи и сохраните в список
# с именем lst.
# 1 вариант
string = input('Введите строку: ')
zipper = [i for i in range(10)]
print(list(zip(string, zipper)))
# 2 вариант
s = input('Введите строку: ')
lst = list(zip(s, range(10)))
print(lst)

# 6. Напишите программу, которая подсчитает и выведет сумму квадратов всех двузначных чисел, делящихся на 9.
# При решении задачи используйте комбинацию функций filter, map, sum.
# Обратите внимание: на 9 должно делиться исходное двузначное число, а не его квадрат

# 1 вариант

l_value = [23, 63, 2, 81, 34, 234]
print(l_value)
l_value = list(filter(lambda x: (9 < x < 100) and (x % 9 == 0), l_value))
print(l_value)
l_value = list(map(lambda x: x**2, l_value))
print(l_value)
print(sum(l_value))

# 2 вариант

kombination = [x**2 for x in range(10,100) if not x%9]
print(sum(kombination))


# 7.Напишите функцию triangle(a, b, c), которая принимает на вход три длины отрезков и определяет, можно ли из этих
# отрезков составить треугольник.
# Входные данные: triangle(1, 1, 2); triangle(7, 6, 10)
# Выходные данные: Это не треугольник

def triangle(a, b, c):
    return a + b > c and a + c > b and b + c > a
print(triangle(1, 2, 3))                    #  возвращает True или False